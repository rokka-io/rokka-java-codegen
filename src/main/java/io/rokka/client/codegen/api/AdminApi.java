/*
 * rokka.io
 * digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.rokka.client.codegen.api;

import io.rokka.client.codegen.ApiCallback;
import io.rokka.client.codegen.ApiClient;
import io.rokka.client.codegen.ApiException;
import io.rokka.client.codegen.ApiResponse;
import io.rokka.client.codegen.Configuration;
import io.rokka.client.codegen.Pair;
import io.rokka.client.codegen.ProgressRequestBody;
import io.rokka.client.codegen.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.rokka.client.codegen.model.Membership;
import io.rokka.client.codegen.model.Organization;
import io.rokka.client.codegen.model.OrganizationDefinition;
import io.rokka.client.codegen.model.OrganizationOptions;
import io.rokka.client.codegen.model.Role;
import io.rokka.client.codegen.model.User;
import io.rokka.client.codegen.model.UserDefinition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminApi {
    private ApiClient apiClient;

    public AdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createMembership
     * @param role Role specification (required)
     * @param organization  (required)
     * @param email  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html#add-user-to-organization">Add a rokka user into an organization. Documentation</a>
     */
    public com.squareup.okhttp.Call createMembershipCall(Role role, String organization, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = role;

        // create path and map variables
        String localVarPath = "/organizations/{organization}/memberships/{email}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMembershipValidateBeforeCall(Role role, String organization, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling createMembership(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling createMembership(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling createMembership(Async)");
        }
        

        com.squareup.okhttp.Call call = createMembershipCall(role, organization, email, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a rokka user into an organization.
     * 
     * @param role Role specification (required)
     * @param organization  (required)
     * @param email  (required)
     * @return Membership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html#add-user-to-organization">Add a rokka user into an organization. Documentation</a>
     */
    public Membership createMembership(Role role, String organization, String email) throws ApiException {
        ApiResponse<Membership> resp = createMembershipWithHttpInfo(role, organization, email);
        return resp.getData();
    }

    /**
     * Add a rokka user into an organization.
     * 
     * @param role Role specification (required)
     * @param organization  (required)
     * @param email  (required)
     * @return ApiResponse&lt;Membership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html#add-user-to-organization">Add a rokka user into an organization. Documentation</a>
     */
    public ApiResponse<Membership> createMembershipWithHttpInfo(Role role, String organization, String email) throws ApiException {
        com.squareup.okhttp.Call call = createMembershipValidateBeforeCall(role, organization, email, null, null);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a rokka user into an organization. (asynchronously)
     * 
     * @param role Role specification (required)
     * @param organization  (required)
     * @param email  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html#add-user-to-organization">Add a rokka user into an organization. Documentation</a>
     */
    public com.squareup.okhttp.Call createMembershipAsync(Role role, String organization, String email, final ApiCallback<Membership> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMembershipValidateBeforeCall(role, organization, email, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrganization
     * @param organization Name of the organization to create (must be a web safe string) (required)
     * @param organizationDefinition Organization information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/organizations.html#create-an-organization">Register a new Organization. Documentation</a>
     */
    public com.squareup.okhttp.Call createOrganizationCall(String organization, OrganizationDefinition organizationDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = organizationDefinition;

        // create path and map variables
        String localVarPath = "/organizations/{organization}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrganizationValidateBeforeCall(String organization, OrganizationDefinition organizationDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling createOrganization(Async)");
        }
        
        // verify the required parameter 'organizationDefinition' is set
        if (organizationDefinition == null) {
            throw new ApiException("Missing the required parameter 'organizationDefinition' when calling createOrganization(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrganizationCall(organization, organizationDefinition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Register a new Organization.
     * 
     * @param organization Name of the organization to create (must be a web safe string) (required)
     * @param organizationDefinition Organization information (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/organizations.html#create-an-organization">Register a new Organization. Documentation</a>
     */
    public Organization createOrganization(String organization, OrganizationDefinition organizationDefinition) throws ApiException {
        ApiResponse<Organization> resp = createOrganizationWithHttpInfo(organization, organizationDefinition);
        return resp.getData();
    }

    /**
     * Register a new Organization.
     * 
     * @param organization Name of the organization to create (must be a web safe string) (required)
     * @param organizationDefinition Organization information (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/organizations.html#create-an-organization">Register a new Organization. Documentation</a>
     */
    public ApiResponse<Organization> createOrganizationWithHttpInfo(String organization, OrganizationDefinition organizationDefinition) throws ApiException {
        com.squareup.okhttp.Call call = createOrganizationValidateBeforeCall(organization, organizationDefinition, null, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register a new Organization. (asynchronously)
     * 
     * @param organization Name of the organization to create (must be a web safe string) (required)
     * @param organizationDefinition Organization information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/organizations.html#create-an-organization">Register a new Organization. Documentation</a>
     */
    public com.squareup.okhttp.Call createOrganizationAsync(String organization, OrganizationDefinition organizationDefinition, final ApiCallback<Organization> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrganizationValidateBeforeCall(organization, organizationDefinition, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrganizationOptions
     * @param organization Organization name (required)
     * @param organizationOptions Organization options (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#loading-images-from-a-remote-url">Update options for an organization. Documentation</a>
     */
    public com.squareup.okhttp.Call createOrganizationOptionsCall(String organization, OrganizationOptions organizationOptions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = organizationOptions;

        // create path and map variables
        String localVarPath = "/organizations/{organization}/options"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrganizationOptionsValidateBeforeCall(String organization, OrganizationOptions organizationOptions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling createOrganizationOptions(Async)");
        }
        
        // verify the required parameter 'organizationOptions' is set
        if (organizationOptions == null) {
            throw new ApiException("Missing the required parameter 'organizationOptions' when calling createOrganizationOptions(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrganizationOptionsCall(organization, organizationOptions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update options for an organization.
     * This is currently used for the remote_* options.  See https://rokka.io/documentation/references/stacks.html#loading-images-from-a-remote-url for details.
     * @param organization Organization name (required)
     * @param organizationOptions Organization options (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#loading-images-from-a-remote-url">Update options for an organization. Documentation</a>
     */
    public Organization createOrganizationOptions(String organization, OrganizationOptions organizationOptions) throws ApiException {
        ApiResponse<Organization> resp = createOrganizationOptionsWithHttpInfo(organization, organizationOptions);
        return resp.getData();
    }

    /**
     * Update options for an organization.
     * This is currently used for the remote_* options.  See https://rokka.io/documentation/references/stacks.html#loading-images-from-a-remote-url for details.
     * @param organization Organization name (required)
     * @param organizationOptions Organization options (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#loading-images-from-a-remote-url">Update options for an organization. Documentation</a>
     */
    public ApiResponse<Organization> createOrganizationOptionsWithHttpInfo(String organization, OrganizationOptions organizationOptions) throws ApiException {
        com.squareup.okhttp.Call call = createOrganizationOptionsValidateBeforeCall(organization, organizationOptions, null, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update options for an organization. (asynchronously)
     * This is currently used for the remote_* options.  See https://rokka.io/documentation/references/stacks.html#loading-images-from-a-remote-url for details.
     * @param organization Organization name (required)
     * @param organizationOptions Organization options (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#loading-images-from-a-remote-url">Update options for an organization. Documentation</a>
     */
    public com.squareup.okhttp.Call createOrganizationOptionsAsync(String organization, OrganizationOptions organizationOptions, final ApiCallback<Organization> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrganizationOptionsValidateBeforeCall(organization, organizationOptions, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUser
     * @param userDefinition User information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/users.html#create-a-user">Register new user. Documentation</a>
     */
    public com.squareup.okhttp.Call createUserCall(UserDefinition userDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userDefinition;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserValidateBeforeCall(UserDefinition userDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userDefinition' is set
        if (userDefinition == null) {
            throw new ApiException("Missing the required parameter 'userDefinition' when calling createUser(Async)");
        }
        

        com.squareup.okhttp.Call call = createUserCall(userDefinition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Register new user.
     * 
     * @param userDefinition User information (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/users.html#create-a-user">Register new user. Documentation</a>
     */
    public User createUser(UserDefinition userDefinition) throws ApiException {
        ApiResponse<User> resp = createUserWithHttpInfo(userDefinition);
        return resp.getData();
    }

    /**
     * Register new user.
     * 
     * @param userDefinition User information (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/users.html#create-a-user">Register new user. Documentation</a>
     */
    public ApiResponse<User> createUserWithHttpInfo(UserDefinition userDefinition) throws ApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(userDefinition, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register new user. (asynchronously)
     * 
     * @param userDefinition User information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/users.html#create-a-user">Register new user. Documentation</a>
     */
    public com.squareup.okhttp.Call createUserAsync(UserDefinition userDefinition, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserValidateBeforeCall(userDefinition, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMembership
     * @param organization  (required)
     * @param email  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html">Remove a user from an organization. Documentation</a>
     */
    public com.squareup.okhttp.Call deleteMembershipCall(String organization, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization}/memberships/{email}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMembershipValidateBeforeCall(String organization, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling deleteMembership(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling deleteMembership(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMembershipCall(organization, email, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a user from an organization.
     * 
     * @param organization  (required)
     * @param email  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html">Remove a user from an organization. Documentation</a>
     */
    public void deleteMembership(String organization, String email) throws ApiException {
        deleteMembershipWithHttpInfo(organization, email);
    }

    /**
     * Remove a user from an organization.
     * 
     * @param organization  (required)
     * @param email  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html">Remove a user from an organization. Documentation</a>
     */
    public ApiResponse<Void> deleteMembershipWithHttpInfo(String organization, String email) throws ApiException {
        com.squareup.okhttp.Call call = deleteMembershipValidateBeforeCall(organization, email, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a user from an organization. (asynchronously)
     * 
     * @param organization  (required)
     * @param email  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html">Remove a user from an organization. Documentation</a>
     */
    public com.squareup.okhttp.Call deleteMembershipAsync(String organization, String email, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMembershipValidateBeforeCall(organization, email, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMembership
     * @param organization  (required)
     * @param email  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html">Get information about organization membership of a rokka user. Documentation</a>
     */
    public com.squareup.okhttp.Call getMembershipCall(String organization, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization}/memberships/{email}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMembershipValidateBeforeCall(String organization, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getMembership(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling getMembership(Async)");
        }
        

        com.squareup.okhttp.Call call = getMembershipCall(organization, email, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get information about organization membership of a rokka user.
     * 
     * @param organization  (required)
     * @param email  (required)
     * @return Membership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html">Get information about organization membership of a rokka user. Documentation</a>
     */
    public Membership getMembership(String organization, String email) throws ApiException {
        ApiResponse<Membership> resp = getMembershipWithHttpInfo(organization, email);
        return resp.getData();
    }

    /**
     * Get information about organization membership of a rokka user.
     * 
     * @param organization  (required)
     * @param email  (required)
     * @return ApiResponse&lt;Membership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html">Get information about organization membership of a rokka user. Documentation</a>
     */
    public ApiResponse<Membership> getMembershipWithHttpInfo(String organization, String email) throws ApiException {
        com.squareup.okhttp.Call call = getMembershipValidateBeforeCall(organization, email, null, null);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get information about organization membership of a rokka user. (asynchronously)
     * 
     * @param organization  (required)
     * @param email  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/memberships.html">Get information about organization membership of a rokka user. Documentation</a>
     */
    public com.squareup.okhttp.Call getMembershipAsync(String organization, String email, final ApiCallback<Membership> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMembershipValidateBeforeCall(organization, email, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrganization
     * @param organization Organization name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/organizations.html#read-data-of-one-organization">Get information about an organization. Documentation</a>
     */
    public com.squareup.okhttp.Call getOrganizationCall(String organization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrganizationValidateBeforeCall(String organization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getOrganization(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrganizationCall(organization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get information about an organization.
     * 
     * @param organization Organization name (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/organizations.html#read-data-of-one-organization">Get information about an organization. Documentation</a>
     */
    public Organization getOrganization(String organization) throws ApiException {
        ApiResponse<Organization> resp = getOrganizationWithHttpInfo(organization);
        return resp.getData();
    }

    /**
     * Get information about an organization.
     * 
     * @param organization Organization name (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/organizations.html#read-data-of-one-organization">Get information about an organization. Documentation</a>
     */
    public ApiResponse<Organization> getOrganizationWithHttpInfo(String organization) throws ApiException {
        com.squareup.okhttp.Call call = getOrganizationValidateBeforeCall(organization, null, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get information about an organization. (asynchronously)
     * 
     * @param organization Organization name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/organizations.html#read-data-of-one-organization">Get information about an organization. Documentation</a>
     */
    public com.squareup.okhttp.Call getOrganizationAsync(String organization, final ApiCallback<Organization> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrganizationValidateBeforeCall(organization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
