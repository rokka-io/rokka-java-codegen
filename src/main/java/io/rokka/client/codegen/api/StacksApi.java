/*
 * rokka.io
 * digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.rokka.client.codegen.api;

import io.rokka.client.codegen.ApiCallback;
import io.rokka.client.codegen.ApiClient;
import io.rokka.client.codegen.ApiException;
import io.rokka.client.codegen.ApiResponse;
import io.rokka.client.codegen.Configuration;
import io.rokka.client.codegen.Pair;
import io.rokka.client.codegen.ProgressRequestBody;
import io.rokka.client.codegen.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.rokka.client.codegen.model.ListStacksResponse;
import io.rokka.client.codegen.model.Stack;
import io.rokka.client.codegen.model.StackDefinition;
import io.rokka.client.codegen.model.StackOperationDescription;
import io.rokka.client.codegen.model.StackOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StacksApi {
    private ApiClient apiClient;

    public StacksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StacksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createStack
     * @param stackDefinition Stack operations and options definition. See https://rokka.io/documentation/references/stacks.html for explanations how to define stacks. (required)
     * @param organization  (required)
     * @param name  (required)
     * @param overwrite Whether to overwrite the stack if it already exists (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#create-a-stack">Create a new stack. Documentation</a>
     */
    public com.squareup.okhttp.Call createStackCall(StackDefinition stackDefinition, String organization, String name, Boolean overwrite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = stackDefinition;

        // create path and map variables
        String localVarPath = "/stacks/{organization}/{name}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (overwrite != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("overwrite", overwrite));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStackValidateBeforeCall(StackDefinition stackDefinition, String organization, String name, Boolean overwrite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stackDefinition' is set
        if (stackDefinition == null) {
            throw new ApiException("Missing the required parameter 'stackDefinition' when calling createStack(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling createStack(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createStack(Async)");
        }
        

        com.squareup.okhttp.Call call = createStackCall(stackDefinition, organization, name, overwrite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new stack.
     * 
     * @param stackDefinition Stack operations and options definition. See https://rokka.io/documentation/references/stacks.html for explanations how to define stacks. (required)
     * @param organization  (required)
     * @param name  (required)
     * @param overwrite Whether to overwrite the stack if it already exists (optional, default to false)
     * @return Stack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#create-a-stack">Create a new stack. Documentation</a>
     */
    public Stack createStack(StackDefinition stackDefinition, String organization, String name, Boolean overwrite) throws ApiException {
        ApiResponse<Stack> resp = createStackWithHttpInfo(stackDefinition, organization, name, overwrite);
        return resp.getData();
    }

    /**
     * Create a new stack.
     * 
     * @param stackDefinition Stack operations and options definition. See https://rokka.io/documentation/references/stacks.html for explanations how to define stacks. (required)
     * @param organization  (required)
     * @param name  (required)
     * @param overwrite Whether to overwrite the stack if it already exists (optional, default to false)
     * @return ApiResponse&lt;Stack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#create-a-stack">Create a new stack. Documentation</a>
     */
    public ApiResponse<Stack> createStackWithHttpInfo(StackDefinition stackDefinition, String organization, String name, Boolean overwrite) throws ApiException {
        com.squareup.okhttp.Call call = createStackValidateBeforeCall(stackDefinition, organization, name, overwrite, null, null);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new stack. (asynchronously)
     * 
     * @param stackDefinition Stack operations and options definition. See https://rokka.io/documentation/references/stacks.html for explanations how to define stacks. (required)
     * @param organization  (required)
     * @param name  (required)
     * @param overwrite Whether to overwrite the stack if it already exists (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#create-a-stack">Create a new stack. Documentation</a>
     */
    public com.squareup.okhttp.Call createStackAsync(StackDefinition stackDefinition, String organization, String name, Boolean overwrite, final ApiCallback<Stack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStackValidateBeforeCall(stackDefinition, organization, name, overwrite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteStack
     * @param organization  (required)
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#delete-a-stack">Delete a stack. Documentation</a>
     */
    public com.squareup.okhttp.Call deleteStackCall(String organization, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stacks/{organization}/{name}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStackValidateBeforeCall(String organization, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling deleteStack(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteStack(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteStackCall(organization, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a stack.
     * 
     * @param organization  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#delete-a-stack">Delete a stack. Documentation</a>
     */
    public void deleteStack(String organization, String name) throws ApiException {
        deleteStackWithHttpInfo(organization, name);
    }

    /**
     * Delete a stack.
     * 
     * @param organization  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#delete-a-stack">Delete a stack. Documentation</a>
     */
    public ApiResponse<Void> deleteStackWithHttpInfo(String organization, String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteStackValidateBeforeCall(organization, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a stack. (asynchronously)
     * 
     * @param organization  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#delete-a-stack">Delete a stack. Documentation</a>
     */
    public com.squareup.okhttp.Call deleteStackAsync(String organization, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStackValidateBeforeCall(organization, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getStack
     * @param organization  (required)
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#retrieve-a-stack">Get a single stack. Documentation</a>
     */
    public com.squareup.okhttp.Call getStackCall(String organization, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stacks/{organization}/{name}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStackValidateBeforeCall(String organization, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getStack(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getStack(Async)");
        }
        

        com.squareup.okhttp.Call call = getStackCall(organization, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single stack.
     * 
     * @param organization  (required)
     * @param name  (required)
     * @return Stack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#retrieve-a-stack">Get a single stack. Documentation</a>
     */
    public Stack getStack(String organization, String name) throws ApiException {
        ApiResponse<Stack> resp = getStackWithHttpInfo(organization, name);
        return resp.getData();
    }

    /**
     * Get a single stack.
     * 
     * @param organization  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Stack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#retrieve-a-stack">Get a single stack. Documentation</a>
     */
    public ApiResponse<Stack> getStackWithHttpInfo(String organization, String name) throws ApiException {
        com.squareup.okhttp.Call call = getStackValidateBeforeCall(organization, name, null, null);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single stack. (asynchronously)
     * 
     * @param organization  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#retrieve-a-stack">Get a single stack. Documentation</a>
     */
    public com.squareup.okhttp.Call getStackAsync(String organization, String name, final ApiCallback<Stack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStackValidateBeforeCall(organization, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOperations
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/operations.html#list-operations">Listing all available operations that can be used in stacks. Documentation</a>
     */
    public com.squareup.okhttp.Call listOperationsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOperationsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listOperationsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Listing all available operations that can be used in stacks.
     * 
     * @return Map&lt;String, StackOperationDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/operations.html#list-operations">Listing all available operations that can be used in stacks. Documentation</a>
     */
    public Map<String, StackOperationDescription> listOperations() throws ApiException {
        ApiResponse<Map<String, StackOperationDescription>> resp = listOperationsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Listing all available operations that can be used in stacks.
     * 
     * @return ApiResponse&lt;Map&lt;String, StackOperationDescription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/operations.html#list-operations">Listing all available operations that can be used in stacks. Documentation</a>
     */
    public ApiResponse<Map<String, StackOperationDescription>> listOperationsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listOperationsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Map<String, StackOperationDescription>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Listing all available operations that can be used in stacks. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/operations.html#list-operations">Listing all available operations that can be used in stacks. Documentation</a>
     */
    public com.squareup.okhttp.Call listOperationsAsync(final ApiCallback<Map<String, StackOperationDescription>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOperationsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, StackOperationDescription>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listStackOptions
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html">List all available options that can be set on stacks. Documentation</a>
     */
    public com.squareup.okhttp.Call listStackOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stackoptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listStackOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listStackOptionsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all available options that can be set on stacks.
     * 
     * @return StackOptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html">List all available options that can be set on stacks. Documentation</a>
     */
    public StackOptions listStackOptions() throws ApiException {
        ApiResponse<StackOptions> resp = listStackOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all available options that can be set on stacks.
     * 
     * @return ApiResponse&lt;StackOptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html">List all available options that can be set on stacks. Documentation</a>
     */
    public ApiResponse<StackOptions> listStackOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listStackOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<StackOptions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all available options that can be set on stacks. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html">List all available options that can be set on stacks. Documentation</a>
     */
    public com.squareup.okhttp.Call listStackOptionsAsync(final ApiCallback<StackOptions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listStackOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StackOptions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listStacks
     * @param organization  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#list-stacks">Get all stacks of an organization. Documentation</a>
     */
    public com.squareup.okhttp.Call listStacksCall(String organization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stacks/{organization}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listStacksValidateBeforeCall(String organization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling listStacks(Async)");
        }
        

        com.squareup.okhttp.Call call = listStacksCall(organization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all stacks of an organization.
     * 
     * @param organization  (required)
     * @return ListStacksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#list-stacks">Get all stacks of an organization. Documentation</a>
     */
    public ListStacksResponse listStacks(String organization) throws ApiException {
        ApiResponse<ListStacksResponse> resp = listStacksWithHttpInfo(organization);
        return resp.getData();
    }

    /**
     * Get all stacks of an organization.
     * 
     * @param organization  (required)
     * @return ApiResponse&lt;ListStacksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#list-stacks">Get all stacks of an organization. Documentation</a>
     */
    public ApiResponse<ListStacksResponse> listStacksWithHttpInfo(String organization) throws ApiException {
        com.squareup.okhttp.Call call = listStacksValidateBeforeCall(organization, null, null);
        Type localVarReturnType = new TypeToken<ListStacksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all stacks of an organization. (asynchronously)
     * 
     * @param organization  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://rokka.io/documentation/references/stacks.html#list-stacks">Get all stacks of an organization. Documentation</a>
     */
    public com.squareup.okhttp.Call listStacksAsync(String organization, final ApiCallback<ListStacksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listStacksValidateBeforeCall(organization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListStacksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
