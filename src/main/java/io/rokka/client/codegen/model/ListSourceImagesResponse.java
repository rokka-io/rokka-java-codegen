/*
 * rokka.io
 * digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.rokka.client.codegen.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.rokka.client.codegen.model.SourceImage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ListSourceImagesResponse
 */

public class ListSourceImagesResponse {
  @SerializedName("total")
  private Integer total = null;

  @SerializedName("items")
  private List<SourceImage> items = null;

  @SerializedName("cursor")
  private String cursor = null;

  @SerializedName("links")
  private Object links = null;

  public ListSourceImagesResponse total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @ApiModelProperty(example = "42", value = "")
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }

  public ListSourceImagesResponse items(List<SourceImage> items) {
    this.items = items;
    return this;
  }

  public ListSourceImagesResponse addItemsItem(SourceImage itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<SourceImage>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @ApiModelProperty(value = "")
  public List<SourceImage> getItems() {
    return items;
  }

  public void setItems(List<SourceImage> items) {
    this.items = items;
  }

  public ListSourceImagesResponse cursor(String cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @ApiModelProperty(example = "VadZTVFQQW9KNG10VEdndDRDUHhKc2IyTmhiR05pTjJRMlltUXdaVFEzWkdKa09UTmtOV1F4TnpKbE9UVXdOakV4TkRrMk56ZGpaR015WW1SMFpYTjAy", value = "")
  public String getCursor() {
    return cursor;
  }

  public void setCursor(String cursor) {
    this.cursor = cursor;
  }

  public ListSourceImagesResponse links(Object links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(example = "{\"next\":{\"href\":\"/sourceimages/test?limit=5&offset=5\"}}", value = "")
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListSourceImagesResponse listSourceImagesResponse = (ListSourceImagesResponse) o;
    return Objects.equals(this.total, listSourceImagesResponse.total) &&
        Objects.equals(this.items, listSourceImagesResponse.items) &&
        Objects.equals(this.cursor, listSourceImagesResponse.cursor) &&
        Objects.equals(this.links, listSourceImagesResponse.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, items, cursor, links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListSourceImagesResponse {\n");
    
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

