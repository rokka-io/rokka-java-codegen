/*
 * rokka.io
 * digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.rokka.client.codegen.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Organization options as key-value pairs
 */
@ApiModel(description = "Organization options as key-value pairs")

public class OrganizationOptions {
  @SerializedName("remote_basepath")
  private String remoteBasepath = null;

  @SerializedName("remote_fullurl_allow")
  private Boolean remoteFullurlAllow = null;

  @SerializedName("remote_fullurl_whitelist")
  private List<String> remoteFullurlWhitelist = null;

  public OrganizationOptions remoteBasepath(String remoteBasepath) {
    this.remoteBasepath = remoteBasepath;
    return this;
  }

   /**
   * Get remoteBasepath
   * @return remoteBasepath
  **/
  @ApiModelProperty(value = "")
  public String getRemoteBasepath() {
    return remoteBasepath;
  }

  public void setRemoteBasepath(String remoteBasepath) {
    this.remoteBasepath = remoteBasepath;
  }

  public OrganizationOptions remoteFullurlAllow(Boolean remoteFullurlAllow) {
    this.remoteFullurlAllow = remoteFullurlAllow;
    return this;
  }

   /**
   * Get remoteFullurlAllow
   * @return remoteFullurlAllow
  **/
  @ApiModelProperty(value = "")
  public Boolean isRemoteFullurlAllow() {
    return remoteFullurlAllow;
  }

  public void setRemoteFullurlAllow(Boolean remoteFullurlAllow) {
    this.remoteFullurlAllow = remoteFullurlAllow;
  }

  public OrganizationOptions remoteFullurlWhitelist(List<String> remoteFullurlWhitelist) {
    this.remoteFullurlWhitelist = remoteFullurlWhitelist;
    return this;
  }

  public OrganizationOptions addRemoteFullurlWhitelistItem(String remoteFullurlWhitelistItem) {
    if (this.remoteFullurlWhitelist == null) {
      this.remoteFullurlWhitelist = new ArrayList<String>();
    }
    this.remoteFullurlWhitelist.add(remoteFullurlWhitelistItem);
    return this;
  }

   /**
   * Get remoteFullurlWhitelist
   * @return remoteFullurlWhitelist
  **/
  @ApiModelProperty(value = "")
  public List<String> getRemoteFullurlWhitelist() {
    return remoteFullurlWhitelist;
  }

  public void setRemoteFullurlWhitelist(List<String> remoteFullurlWhitelist) {
    this.remoteFullurlWhitelist = remoteFullurlWhitelist;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationOptions organizationOptions = (OrganizationOptions) o;
    return Objects.equals(this.remoteBasepath, organizationOptions.remoteBasepath) &&
        Objects.equals(this.remoteFullurlAllow, organizationOptions.remoteFullurlAllow) &&
        Objects.equals(this.remoteFullurlWhitelist, organizationOptions.remoteFullurlWhitelist);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteBasepath, remoteFullurlAllow, remoteFullurlWhitelist);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationOptions {\n");
    
    sb.append("    remoteBasepath: ").append(toIndentedString(remoteBasepath)).append("\n");
    sb.append("    remoteFullurlAllow: ").append(toIndentedString(remoteFullurlAllow)).append("\n");
    sb.append("    remoteFullurlWhitelist: ").append(toIndentedString(remoteFullurlWhitelist)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

